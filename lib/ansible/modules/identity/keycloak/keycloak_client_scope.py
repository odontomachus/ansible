#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2019, EPFL, Jonathan Villemaire-Krajden <jonathan.villemaire-krajden@epfl.ch>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
---
module: keycloak_client_scope

short_description: This module enables the management of KeyCloak realm and client roles.

version_added: "2.9"

description:
    - The keycloak_role module enables the management of KeyCloak client scopes as introduced in KeyCloak 4.0.
      These are documented here https://www.keycloak.org/docs/latest/server_admin/index.html#_client_scopes
    - This module uses the KeyCloak rest API. Most of the time, it should be run as a local_action
      so that the calls are made locally.
    - There are features that are note covered in this module. Role scope mappings are handled by the
      M(keycloak_client_scope_mapping) module. Protocol Mappers (associated claims) are currently not covered.

options:
    realm:
        description:
            - The name of the realm the role will be created in.
        required: true
    id:
        description:
            - The unique id of the client scope. When creating a scope, a UUID will be generated by KeyCloak
              if this is left empty.
    name:
        description:
            - The name of the role. Either the name or id must be provided. The name must be provided when
              creating a scope.
    state:
        description:
            - The state the scope should be in after running. This should be either C(present) or C(absent).
        default: "present"
        choices: ["present", "absent"]
    attributes:
        description:
            - Key-value pairs stored as scope attributes in KeyCloak.
    description:
        description:
            - Scope description
    protocol:
        description:
            - The protocol this scope is valid for. Either C(openid) or C(saml).
        default: "openid-connect"
        choices: ["openid-connect", "saml"]
        required: false

extends_documentation_fragment:
    - keycloak

author:
    - Jonathan Villemaire-Krajden (@odontomachus)
'''

EXAMPLES = '''
# Create a client scope
- name: Create a client scope
  local_action:
    module: keycloak_client_scope
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
    name: ansible
    state: present

# Remove a client scope
- name: Create a client scope
  local_action:
    module: keycloak_client_scope
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
    name: world
    state: absent
'''

RETURN = '''
changed:
    description: Whether the action changed the state
    type: str
    returned: always
'''

from copy import deepcopy
from ansible.module_utils._text import to_text
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.identity.keycloak.keycloak import (
    KeycloakAPI,
    KeycloakAuthorizationHeader,
    keycloak_argument_spec,
)


def run_module():
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        **keycloak_argument_spec(),
        realm=dict(type='str', default="master"),
        id=dict(type='str'),
        name=dict(type='str'),
        state=dict(type='str', choices=['present', 'absent'], default='present'),
        description=dict(type='str'),
        attributes=dict(type='dict'),
        protocol=dict(type='str', choices=['saml', 'openid-connect'], default='openid-connect'),
    )

    result = dict(
        changed=False,
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    # Obtain access token, initialize API
    connection_header = KeycloakAuthorizationHeader(
        base_url=module.params.get('auth_keycloak_url'),
        validate_certs=module.params.get('validate_certs'),
        auth_realm=module.params.get('auth_realm'),
        client_id=module.params.get('auth_client_id'),
        auth_username=module.params.get('auth_username'),
        auth_password=module.params.get('auth_password'),
        client_secret=module.params.get('auth_client_secret'),
    )
    kc = KeycloakAPI(module, connection_header)

    realm = module.params.get('realm')
    state = module.params.get('state')
    id_ = module.params.get('id')
    name = module.params.get('name')
    params = {k: v for (k, v) in module.params.items() if k in
              ('id', 'name', 'description', 'attributes', 'protocol') if v is not None}

    try:
        scopes = kc.get_client_scopes(realm)
    except Exception as e:
        module.fail_json(msg="Failed to get existing scope list: %s" % to_text(e))

    filter_ = (lambda s: s['id'] == id_) if id_ else (lambda s: s['name'] == name)
    match = [scope for scope in scopes if filter_(scope)]
    before = match[0] if match else {}
    if before and 'id' not in params:
        params['id'] = before['id']

    if state == 'present':
        target = deepcopy(before)
        target.update(**params)
        result['diff'] = dict(before=before, after=target)
        if before == target:
            module.exit_json(msg="No changes made", **result)

        if module.check_mode:
            module.exit_json(**result)

        apply = kc.update_client_scope if match else kc.create_client_scope
        try:
            apply(realm=realm, **params)
        except Exception as e:
            module.fail_json(msg="Failed to create or update client scope: %s" % to_text(e))

        result['changed'] = True
        result['msg'] = "Updated scope" if match else "Created scope"

    elif state == 'absent' and before:
        kc.delete_client_scope(id_, realm)
        result['changed'] = True

    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
